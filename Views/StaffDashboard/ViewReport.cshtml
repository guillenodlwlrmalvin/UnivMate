@model UnivMate.Models.Reports
@{
    ViewData["Title"] = "View Report";
    Layout = "_Layout";
}

<div class="container-fluid px-lg-4">
    @if (TempData["StatusMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
            <i class="fas fa-info-circle me-2"></i>
            @TempData["StatusMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 mt-4 gap-3">
        <div>
            <h1 class="h2 mb-1">Report Details</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Report #@Model.Id</li>
                </ol>
            </nav>
        </div>
        <a asp-action="Index" class="btn btn-primary">
            <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
        </a>
    </div>

    <div class="card shadow-lg mb-4 border-0">
        <div class="card-header bg-gradient-primary py-3 d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
            <div>
                <h6 class="m-0 font-weight-bold text-white">Report #@Model.Id</h6>
                <small class="text-white-50">Submitted @Model.SubmittedAt.ToString("f")</small>
            </div>
            <span class="badge @GetStatusBadgeClass(Model.Status) fs-6 py-2 px-3">
                <i class="@GetStatusIcon(Model.Status) me-1"></i>@Model.Status
            </span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-lg-6">
                    <div class="mb-4">
                        <h2 class="h4 font-weight-bold text-primary">@Model.Title</h2>
                        <div class="d-flex align-items-center text-muted mt-2">
                            <i class="fas fa-user-circle me-2"></i>
                            <span>@Model.User?.FirstName @Model.User?.LastName • @Model.User?.Email</span>
                        </div>
                    </div>

                    <div class="card mb-4 border-left-3 border-left-primary">
                        <div class="card-body py-2">
                            <h5 class="h6 font-weight-bold mb-2">Description</h5>
                            <p class="mb-0">@Model.Description</p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="card h-100 border-left-3 border-left-info">
                                <div class="card-body py-2">
                                    <h5 class="h6 font-weight-bold mb-2">
                                        <i class="fas fa-map-marker-alt text-info me-2"></i>Location
                                    </h5>
                                    <p class="mb-0">@Model.Location</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card h-100 border-left-3 border-left-warning">
                                <div class="card-body py-2">
                                    <h5 class="h6 font-weight-bold mb-2">
                                        <i class="fas fa-calendar-alt text-warning me-2"></i>Submitted
                                    </h5>
                                    <p class="mb-0">@Model.SubmittedAt.ToString("f")</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                    {
                        <div class="mb-4">
                            <h5 class="h6 font-weight-bold mb-3">
                                <i class="fas fa-image text-purple me-2"></i>Attached Image
                            </h5>
                            <div class="position-relative">
                                <img src="@Url.Content(Model.ImagePath)" alt="Report Image"
                                     class="img-fluid rounded-3 shadow-sm border"
                                     style="max-height: 300px; width: 100%; object-fit: contain;" />
                                <a href="@Url.Content(Model.ImagePath)" target="_blank"
                                   class="btn btn-sm btn-primary position-absolute bottom-0 end-0 m-2"
                                   data-bs-toggle="tooltip" title="View Full Image">
                                    <i class="fas fa-expand"></i>
                                </a>
                            </div>
                        </div>
                    }

                    @if (Model.AssignedTo != null)
                    {
                        <div class="card mb-4 border-left-3 border-left-success">
                            <div class="card-body py-2">
                                <h5 class="h6 font-weight-bold mb-2">
                                    <i class="fas fa-user-check text-success me-2"></i>Assigned To
                                </h5>
                                <p class="mb-1">@Model.AssignedTo.FirstName @Model.AssignedTo.LastName</p>
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i>Assigned: @(Model.AssignedAt?.ToString("f") ?? "-")
                                </small>
                            </div>
                        </div>
                    }

                    @if (Model.ResolvedBy != null)
                    {
                        <div class="card border-left-3 border-left-danger">
                            <div class="card-body py-2">
                                <h5 class="h6 font-weight-bold mb-2">
                                    <i class="fas fa-check-circle text-danger me-2"></i>Resolution Details
                                </h5>
                                <div class="mb-2">
                                    <p class="mb-1">Resolved by: @Model.ResolvedBy.FirstName @Model.ResolvedBy.LastName</p>
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>Resolved: @(Model.ResolvedAt?.ToString("f") ?? "-")
                                    </small>
                                </div>
                                <div class="alert alert-light p-3 mt-2">
                                    <h6 class="font-weight-bold mb-2">Resolution Notes:</h6>
                                    <p class="mb-0">@Model.ResolutionNotes</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

   
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "In Progress" => "bg-info text-white",
            "Completed" => "bg-success text-white",
            "Rejected" => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }

    string GetStatusIconClass(string status)
    {
        return status switch
        {
            "Pending" => "text-warning",
            "In Progress" => "text-info",
            "Completed" => "text-success",
            "Rejected" => "text-danger",
            _ => "text-secondary"
        };
    }

    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Pending" => "fa-clock",
            "In Progress" => "fa-spinner fa-pulse",
            "Completed" => "fa-check-circle",
            "Rejected" => "fa-times-circle",
            _ => "fa-question-circle"
        };
    }

    string GetStatusHistoryIcon(string status)
    {
        return status switch
        {
            "Pending" => "fa-clock",
            "In Progress" => "fa-spinner",
            "Completed" => "fa-check",
            "Rejected" => "fa-ban",
            _ => "fa-circle"
        };
    }
}

<style>
    .timeline {
        position: relative;
        padding-left: 2rem;
        border-left: 3px solid #f0f2f5;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 1rem;
    }

    .timeline-marker {
        position: absolute;
        left: -1.15rem;
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 0 0 4px white, 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

        .timeline-marker i {
            font-size: 1rem;
        }

    .timeline-content {
        padding-left: 1.5rem;
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
    }

    .bg-gradient-secondary {
        background: linear-gradient(135deg, #858796 0%, #5a5c69 100%);
    }

    .border-left-3 {
        border-left: 3px solid !important;
    }
</style>

@section Scripts {
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}